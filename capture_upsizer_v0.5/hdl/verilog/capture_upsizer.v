// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="capture_upsizer_capture_upsizer,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.287000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=519,HLS_SYN_LUT=34,HLS_VERSION=2021_1}" *)

module capture_upsizer (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        instream_TDATA,
        instream_TVALID,
        instream_TREADY,
        instream_TKEEP,
        instream_TSTRB,
        instream_TLAST,
        outstream_TDATA,
        outstream_TVALID,
        outstream_TREADY,
        outstream_TKEEP,
        outstream_TSTRB,
        outstream_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
input  [255:0] instream_TDATA;
input   instream_TVALID;
output   instream_TREADY;
input  [31:0] instream_TKEEP;
input  [31:0] instream_TSTRB;
input  [0:0] instream_TLAST;
output  [511:0] outstream_TDATA;
output   outstream_TVALID;
input   outstream_TREADY;
output  [63:0] outstream_TKEEP;
output  [63:0] outstream_TSTRB;
output  [0:0] outstream_TLAST;

 reg    ap_rst_n_inv;
reg   [255:0] cache_V;
reg   [0:0] cached;
reg    instream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    outstream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] cached_load_reg_140;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] cached_load_reg_140_pp0_iter1_reg;
reg   [255:0] tmp_3_reg_129;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
wire    regslice_both_outstream_V_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_2_reg_135;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] xor_ln38_fu_100_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] or_ln38_fu_94_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_instream_V_data_V_U_apdone_blk;
wire   [255:0] instream_TDATA_int_regslice;
wire    instream_TVALID_int_regslice;
reg    instream_TREADY_int_regslice;
wire    regslice_both_instream_V_data_V_U_ack_in;
wire    regslice_both_instream_V_keep_V_U_apdone_blk;
wire   [31:0] instream_TKEEP_int_regslice;
wire    regslice_both_instream_V_keep_V_U_vld_out;
wire    regslice_both_instream_V_keep_V_U_ack_in;
wire    regslice_both_instream_V_strb_V_U_apdone_blk;
wire   [31:0] instream_TSTRB_int_regslice;
wire    regslice_both_instream_V_strb_V_U_vld_out;
wire    regslice_both_instream_V_strb_V_U_ack_in;
wire    regslice_both_instream_V_last_V_U_apdone_blk;
wire   [0:0] instream_TLAST_int_regslice;
wire    regslice_both_instream_V_last_V_U_vld_out;
wire    regslice_both_instream_V_last_V_U_ack_in;
wire   [511:0] outstream_TDATA_int_regslice;
reg    outstream_TVALID_int_regslice;
wire    outstream_TREADY_int_regslice;
wire    regslice_both_outstream_V_data_V_U_vld_out;
wire    regslice_both_outstream_V_keep_V_U_apdone_blk;
wire    regslice_both_outstream_V_keep_V_U_ack_in_dummy;
wire    regslice_both_outstream_V_keep_V_U_vld_out;
wire    regslice_both_outstream_V_strb_V_U_apdone_blk;
wire    regslice_both_outstream_V_strb_V_U_ack_in_dummy;
wire    regslice_both_outstream_V_strb_V_U_vld_out;
wire    regslice_both_outstream_V_last_V_U_apdone_blk;
wire    regslice_both_outstream_V_last_V_U_ack_in_dummy;
wire    regslice_both_outstream_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 cache_V = 256'd0;
#0 cached = 1'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

capture_upsizer_regslice_both #(
    .DataWidth( 256 ))
regslice_both_instream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(instream_TDATA),
    .vld_in(instream_TVALID),
    .ack_in(regslice_both_instream_V_data_V_U_ack_in),
    .data_out(instream_TDATA_int_regslice),
    .vld_out(instream_TVALID_int_regslice),
    .ack_out(instream_TREADY_int_regslice),
    .apdone_blk(regslice_both_instream_V_data_V_U_apdone_blk)
);

capture_upsizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_instream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(instream_TKEEP),
    .vld_in(instream_TVALID),
    .ack_in(regslice_both_instream_V_keep_V_U_ack_in),
    .data_out(instream_TKEEP_int_regslice),
    .vld_out(regslice_both_instream_V_keep_V_U_vld_out),
    .ack_out(instream_TREADY_int_regslice),
    .apdone_blk(regslice_both_instream_V_keep_V_U_apdone_blk)
);

capture_upsizer_regslice_both #(
    .DataWidth( 32 ))
regslice_both_instream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(instream_TSTRB),
    .vld_in(instream_TVALID),
    .ack_in(regslice_both_instream_V_strb_V_U_ack_in),
    .data_out(instream_TSTRB_int_regslice),
    .vld_out(regslice_both_instream_V_strb_V_U_vld_out),
    .ack_out(instream_TREADY_int_regslice),
    .apdone_blk(regslice_both_instream_V_strb_V_U_apdone_blk)
);

capture_upsizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_instream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(instream_TLAST),
    .vld_in(instream_TVALID),
    .ack_in(regslice_both_instream_V_last_V_U_ack_in),
    .data_out(instream_TLAST_int_regslice),
    .vld_out(regslice_both_instream_V_last_V_U_vld_out),
    .ack_out(instream_TREADY_int_regslice),
    .apdone_blk(regslice_both_instream_V_last_V_U_apdone_blk)
);

capture_upsizer_regslice_both #(
    .DataWidth( 512 ))
regslice_both_outstream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outstream_TDATA_int_regslice),
    .vld_in(outstream_TVALID_int_regslice),
    .ack_in(outstream_TREADY_int_regslice),
    .data_out(outstream_TDATA),
    .vld_out(regslice_both_outstream_V_data_V_U_vld_out),
    .ack_out(outstream_TREADY),
    .apdone_blk(regslice_both_outstream_V_data_V_U_apdone_blk)
);

capture_upsizer_regslice_both #(
    .DataWidth( 64 ))
regslice_both_outstream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(64'd0),
    .vld_in(outstream_TVALID_int_regslice),
    .ack_in(regslice_both_outstream_V_keep_V_U_ack_in_dummy),
    .data_out(outstream_TKEEP),
    .vld_out(regslice_both_outstream_V_keep_V_U_vld_out),
    .ack_out(outstream_TREADY),
    .apdone_blk(regslice_both_outstream_V_keep_V_U_apdone_blk)
);

capture_upsizer_regslice_both #(
    .DataWidth( 64 ))
regslice_both_outstream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(64'd0),
    .vld_in(outstream_TVALID_int_regslice),
    .ack_in(regslice_both_outstream_V_strb_V_U_ack_in_dummy),
    .data_out(outstream_TSTRB),
    .vld_out(regslice_both_outstream_V_strb_V_U_vld_out),
    .ack_out(outstream_TREADY),
    .apdone_blk(regslice_both_outstream_V_strb_V_U_apdone_blk)
);

capture_upsizer_regslice_both #(
    .DataWidth( 1 ))
regslice_both_outstream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_2_reg_135),
    .vld_in(outstream_TVALID_int_regslice),
    .ack_in(regslice_both_outstream_V_last_V_U_ack_in_dummy),
    .data_out(outstream_TLAST),
    .vld_out(regslice_both_outstream_V_last_V_U_vld_out),
    .ack_out(outstream_TREADY),
    .apdone_blk(regslice_both_outstream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_V <= tmp_3_reg_129;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cached <= xor_ln38_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cached_load_reg_140 <= cached;
        cached_load_reg_140_pp0_iter1_reg <= cached_load_reg_140;
        tmp_2_reg_135 <= instream_TLAST_int_regslice;
        tmp_3_reg_129 <= instream_TDATA_int_regslice;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_TDATA_blk_n = instream_TVALID_int_regslice;
    end else begin
        instream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_TREADY_int_regslice = 1'b1;
    end else begin
        instream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((cached_load_reg_140_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((cached_load_reg_140 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        outstream_TDATA_blk_n = outstream_TREADY_int_regslice;
    end else begin
        outstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((cached_load_reg_140 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outstream_TVALID_int_regslice = 1'b1;
    end else begin
        outstream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_outstream_V_data_V_U_apdone_blk == 1'b1) | ((cached_load_reg_140_pp0_iter1_reg == 1'd1) & (outstream_TREADY_int_regslice == 1'b0)))) | ((cached_load_reg_140 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (outstream_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (instream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_outstream_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((cached_load_reg_140_pp0_iter1_reg == 1'd1) & (outstream_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((cached_load_reg_140 == 1'd1) & (outstream_TREADY_int_regslice == 1'b0)))) | ((1'b1 == 1'b1) & (instream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_outstream_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((cached_load_reg_140_pp0_iter1_reg == 1'd1) & (outstream_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((cached_load_reg_140 == 1'd1) & (outstream_TREADY_int_regslice == 1'b0)))) | ((1'b1 == 1'b1) & (instream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (instream_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = ((cached_load_reg_140 == 1'd1) & (outstream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((cached_load_reg_140 == 1'd1) & (outstream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((cached_load_reg_140_pp0_iter1_reg == 1'd1) & (outstream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_outstream_V_data_V_U_apdone_blk == 1'b1) | ((cached_load_reg_140_pp0_iter1_reg == 1'd1) & (outstream_TREADY_int_regslice == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign instream_TREADY = regslice_both_instream_V_data_V_U_ack_in;

assign or_ln38_fu_94_p2 = (instream_TLAST_int_regslice | cached);

assign outstream_TDATA_int_regslice = {{tmp_3_reg_129}, {cache_V}};

assign outstream_TVALID = regslice_both_outstream_V_data_V_U_vld_out;

assign xor_ln38_fu_100_p2 = (or_ln38_fu_94_p2 ^ 1'd1);


// synthesis translate_off
`include "capture_upsizer_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //capture_upsizer

